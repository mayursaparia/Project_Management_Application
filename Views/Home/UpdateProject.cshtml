@model ProjectManagementApp.Models.Project

@{
    ViewBag.Title = "Update Project";
}

<h2>Update Project</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group x">
        @Html.LabelFor(model => model.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "datepicker", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group x">
        @Html.LabelFor(model => model.endDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.endDate, new { htmlAttributes = new { @class = "datepicker", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.endDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.priority, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*<input type="range" min="0" max="30" value="15" id="slider" />*@
            @Html.EditorFor(model => model.priority, new { htmlAttributes = new { @id = "slider", @type = "range", @min = "0", @max = "30", @value = "15" } })
            <div id="range"></div>
            @*@Html.ValidationMessageFor(model => model.priority, "", new { @class = "text-danger" })*@
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.taskNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.taskNo, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.taskNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.status, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.manager, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.manager, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
            @Html.ValidationMessageFor(model => model.manager, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Update" class="btn btn-default" />
        </div>
    </div>
</div>
}

<hr />
<footer>
    <p>&copy; @DateTime.Now.Year - Project Management Application</p>
</footer>



<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

@section Scripts {

    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script type="text/javascript">

        //datapicker
        $(document).ready(function () {
            $(".datepicker").datepicker({
            });
        });

        //priority range
        range.innerHTML = slider.value;

        slider.oninput = function () {
            range.innerHTML = this.value;
        }


    </script>

}
